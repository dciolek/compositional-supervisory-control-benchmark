/******************************************************************************

An airport control tower receives requests from planes trying to land.
The tower needs to signal them when it is safe to approach the ramps and at
which height they must perform holding maneuvers. If two airplanes enter
the same height space or ramp there is a chance a crash may occur.

We want a controller that automatically responds to airplanes requests and
ensures safe usage of the airport space.

The case study can be scaled in the following dimensions:
1- Planes: maximum number of simultaneous land requests.
2- Height: number of spaces above the ground where a plane can hold safely.

******************************************************************************/

const N = 4
const K = 1

const Planes  = N
const Heights = K

range Plane  = 0..(Planes-1)
range Height = 0..(Heights-1)

/*****************************************************************************/


Airplane(P=0) = (
    requestLand[P] -> descend[P][h:Height] -> Holding[h] |
    extendFlight[P] -> End),
  Holding[h:Height] =
    if (h>0) then (descend[P][h-1] -> Holding[h-1])
             else (approach[P] -> land[P] -> End),
  End = (control.all -> Airplane).


HeightMonitor(H=0) = Empty,
  Empty = (
    descend[p:Plane][H] -> Occupied[p] |
    when (H>0) descend[Plane][H-1] -> Empty ),
  Occupied[p:Plane] = (
    foreach [o:Plane]
      when (p != o) descend[o][H] -> air.crash[H] -> ERROR |
      when (p != o && H>0) descend[o][H-1] -> Occupied[p]  |
      when (p == o && H>0) descend[p][H-1] -> Empty |
      when (p == o && H==0) land[Plane]    -> Empty ).


RampMonitor(R=0) = Empty,
  Empty = (
    approach[Plane] -> Occupied ),
  Occupied = (
    approach[Plane] -> land.crash -> ERROR |
    land[Plane]     -> Empty ).


ResponseMonitor = (
  requestLand[p:Plane] -> descend[p][Height] -> ResponseMonitor |
  {extendFlight[Plane],descend[Plane][Height], approach[Plane]}  -> ResponseMonitor ).


/*****************************************************************************/

||Plant = (
  ResponseMonitor || RampMonitor ||
  forall [h:Height] HeightMonitor(h) ||
  forall [p:Plane]  Airplane(p) ).

controllerSpec Goal = {
  controllable = {descend[Plane][Height], approach[Plane]}
  marking = {control.all}
  nonblocking
}

controller ||MonolithicController = Plant~{Goal}.

heuristic ||DirectedController = Plant~{Goal}.

