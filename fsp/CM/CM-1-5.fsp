/*****************************************************************************

Cats and mice are placed in oposite ends of a corridor divided in cells. They
move one cell at a time by turns (first the mice then the cats). The goal is
to control the mice in order to reach the center of the corridor while
avoiding sharing a cell with a cat.

The problem scales in two dimensions:
1- Criters: The number of cats and mice.
2- Levels: The number of cells in the corridor (2*Levels+1).

*****************************************************************************/

const N = 1
const K = 5

const Mice = N
const Cats = N
const Levels = K
const Areas = 2*Levels+1
const Last = Areas-1

const Center = Areas \ 2
range Area = 0..Areas-1

/*****************************************************************************/

Mouse(Mid=0) = Wait[Areas-1],
  Next[a:Area] =
    if (a==Center) then (safe -> cat.turn -> Wait[a])
    else (cat.turn -> Wait[a]),
  Wait[a:Area] = (
    mouse.turn -> Act[a] |
    cat[0..Cats-1].move[b:Area] ->
      if (a==b && a!=Center) then ERROR
      else Wait[a] ),
  Act[a:Area] = (
    mouse[Mid].move[a] -> Next[a] |
    when (a+1 <= Last) mouse[Mid].move[a+1] -> Next[a+1] |
    when (a-1 >= 0   ) mouse[Mid].move[a-1] -> Next[a-1] ).


Cat(Cid=0) = Next[0],
  Next[a:Area] = (mouse.turn -> Wait[a]),
  Wait[a:Area] = (
    cat.turn   -> Act[a] |
    mouse[0..Mice-1].move[b:Area] ->
      if (a==b && a!=Center) then ERROR
      else Wait[a] ),
  Act[a:Area] = (
    cat[Cid].move[a] -> Next[a] |
    when (a+1 <= Last) cat[Cid].move[a+1] -> Next[a+1] |
    when (a-1 >= 0)    cat[Cid].move[a-1] -> Next[a-1] ).

/*****************************************************************************/

||Plant = (
  forall [m:0..Mice-1] Mouse(m) || forall [c:0..Cats-1] Cat(c)).

controllerSpec Goal = {
  controllable = {mouse[0..Mice-1].move[Area]}
  marking = {safe}
  nonblocking
}

controller ||MonolithicController = Plant~{Goal}.

heuristic ||DirectedController = Plant~{Goal}.


